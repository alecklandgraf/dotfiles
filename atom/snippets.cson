# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
".source.js, .source.jsx, .source.ts":
# Async
  "callback":
    prefix: "cb"
    body: "() => {${0}}"
  "node callback":
    prefix: "cbe"
    body: "(error${1:, value}) => {${0}}"
  "promise constructor":
    prefix: "newP",
    body: """
    new Promise((resolve, reject) => {
      ${0}
    });
    """
  "promise then":
    prefix: "thn"
    body: """
    .then((value) => {
      ${0}

      return value;
    });
    """
  "promise inline then":
    prefix: "thni"
    body: """
    .then(value => (
      ${0}
    ));
    """
  "promise catch":
    prefix: "cat"
    body: """
    .catch((error) => {
      ${0}

      throw error;
    });
    """
  "promise catch swallow":
    prefix: "cats"
    body: ".catch(() => {});"
  "yield":
    prefix: "ye"
    body: "yield ${0};"
  "await":
    prefix: "aw"
    body: "await ${0};"
# Classes
  "class":
    prefix: "cs"
    body: """
    class ${1:ClassName} {
      constructor(${2:args}) {
        ${3}
      }
    }
    """
  "class extends":
    prefix: "csx"
    body: """
    class ${1:ClassName} extends ${2:BaseClass} {
      constructor(${3:args}) {
        super(${3:args});
        ${4}
      }
    }
    """
  "class method":
    prefix: "csm"
    body: """
    ${1:name}(${2:args}) {
      ${3}
    }
    """
  "class bound method":
    prefix: "csmb"
    body: """
    ${1:name} = (${2:args}) => {
      ${3}
    };
    """
  "class property":
    prefix: "csp"
    body: """
    ${1:name} = ${2};
    """
# Console
  "console log":
    prefix: "cl"
    body: "console.log(${0});"
  "console error":
    prefix: "ce"
    body: "console.error(${0});"
  "console warn":
    prefix: "cw"
    body: "console.warn(${0});"
  "console dir":
    prefix: "cd"
    body: "console.dir(${0});"
  "console table":
    prefix: "ct"
    body: "console.table(${0});"
# Control flow
  "if statement":
    prefix: "if"
    body: """
    if (${1:condition}) {
      ${2}
    }
    """
  "else statement":
    prefix: "el"
    body: """
    else {
      ${1}
    }
    """
  "if/else statement":
    prefix: "ife"
    body: """
    if (${1:condition}) {
      ${2}
    } else {
      ${3}
    }
    """
  "else if statement":
    prefix: "ei"
    body: """
    else if (${1:condition}) {
      ${2}
    }
    """
  "try catch":
    prefix: "tc"
    body: """
    try {
      ${1}
    } catch (${2:err}) {
      ${3}
    }
    """
  "try finally":
    prefix: "tf"
    body: """
    try {
      ${1}
    } finally {
      ${2}
    }
    """
  "try catch finally":
    prefix: "tcf"
    body: """
    try {
      ${1}
    } catch (${2:err}) {
      ${3}
    } finally {
      ${4}
    }
    """
  "throw error":
    prefix: "te"
    body: "throw new ${1:TypeError}('${2:message}');"
# Variables
  "let statement":
    prefix: "l"
    body: "let ${1:name};"
  "let assignment":
    prefix: "l="
    body: "let ${1:name} = ${2:value};"
  "let yielded":
    prefix: "ly"
    body: "let ${1:name} = yield ${2:value};"
  "let awaited":
    prefix: "la"
    body: "let ${1:name} = await ${2:value};"
  "const statement":
    prefix: "c"
    body: "const ${1:name};"
  "const assignment":
    prefix: "c="
    body: "const ${1:name} = ${2:value};"
  "const yielded":
    prefix: "cy"
    body: "const ${1:name} = yield ${2:value};"
  "const awaited":
    prefix: "ca"
    body: "const ${1:name} = await ${2:value};"
  "const object":
    prefix: "co"
    body: """
    const ${1:name} = {
      ${2}
    };
    """
  "const array":
    prefix: "ca"
    body: """
    const ${1:name} = [
      ${2}
    ];
    """
# Functions
  "anonymous function":
    prefix: "f"
    body: "function (${1:args}) {${0}}"
  "named function":
    prefix: "fn"
    body: "function ${1:name}(${2:args}) {${0}}"
  "async anonymous function":
    prefix: "asf"
    body: "async function (${1:args}) {${0}}"
  "async named function":
    prefix: "asfn"
    body: "async function ${1:name} (${2:args}) {${0}}"
  "arrow function":
    prefix: "af"
    body: "(${1:args}) => ${2:statement};"
  "arrow function with body":
    prefix: "afn"
    body: "(${1:args}) => {${0}};"
  "generator":
    prefix: "gf"
    body: "function * (${1:args}) {${0}}"
  "named generator":
    prefix: "gfn"
    body: "function * ${1:name} (${2:args}) {${0}}"
  "immediately-invoked function expression":
    prefix: "iife"
    body: """
    ;(function (${1:args}) {
      ${0}
    })(${2});
    """
  "function apply":
    prefix: "fa"
    body: "${1:fn}.apply(${2:this}, ${3:args});"
  "function call":
    prefix: "fc"
    body: "${1:fn}.call(${2:this}, ${3:args});"
  "function bind":
    prefix: "fb"
    body: "${1:fn}.bind(${2:this}, ${3:args});"
# Loops
  "for loop":
    prefix: "fl"
    body: """
    for (let ${1:i} = 0; ${1:i} < ${2:iterable}${3:.length}; ${1:i}++) {
      ${4}
    }
    """
  "for in loop":
    prefix: "fil"
    body: """
    for (let ${1:key} in ${2:source}) {
      if (${2:source}.hasOwnProperty(${1:key})) {
        ${3}
      }
    }
    """
  "for of loop":
    prefix: "fol"
    body: """
    for (let ${1:key} of ${2:source}) {
      ${3}
    }
    """
  "while loop":
    prefix: "wl"
    body: """
    while (${1:condition}) {
      ${2}
    }
    """
# Modules
  "require module":
    prefix: "rq"
    body: "const ${2:name} = require('${1:pkg}');"
  "module exports":
    prefix: "me"
    body: "module.exports = ${1:value};"
  "export module":
    prefix: "ex"
    body: "export ${1:member};"
  "export default module":
    prefix: "exd"
    body: "export default ${1:member};"
  "import module":
    prefix: "im"
    body: "import ${2:name} from '${1:pkg}';"
  "import module as":
    prefix: "ima"
    body: "import ${2:*} as ${3:name} from '${1:pkg}';"
  "import module named":
    prefix: "imn"
    body: "import { $2 } from '${1:pkg}';"
# Returns
  "return":
    prefix: "r"
    body: "return ${0};"
  "return this":
    prefix: "rth"
    body: "return this;"
  "return null":
    prefix: "rn"
    body: "return null;"
  "return true":
    prefix: "rt"
    body: "return true;"
  "return false":
    prefix: "rf"
    body: "return false;"
  "return undefined":
    prefix: "rr"
    body: "return;"
# Timers
  "setTimeout":
    prefix: "st"
    body: """
    setTimeout(() => {
      ${0}
    }, ${1:0});
    """
  "nextTick":
    prefix: "nt"
    body: """
    process.nextTick(() => {
      ${0}
    }${1:, args});
    """
  "setInterval":
    prefix: "si"
    body: """
    setInterval(() => {
      ${0}
    }, ${1:0});
    """
  "setImmediate":
    prefix: "sim"
    body: """
    setImmediate(() => {
      ${0}
    });
    """
# Types
  "String":
    prefix: "S"
    body: "String"
  "Symbol":
    prefix: "Sy"
    body: "Symbol('${1:name}');"
  "Boolean":
    prefix: "B"
    body: "Boolean"
  "Number":
    prefix: "N"
    body: "Number"
  "Object":
    prefix: "O"
    body: "Object"
  "Array":
    prefix: "A"
    body: "Array"
  "Date":
    prefix: "D"
    body: "Date"
  "RegExp":
    prefix: "Rx"
    body: "RegExp"
  "Promise":
    prefix: "P"
    body: "Promise"
  "typeof":
    prefix: "tof"
    body: "typeof ${1:source} === '${2:value}'"
  "typeof negated":
    prefix: "tofi"
    body: "typeof ${1:source} !== '${2:value}'"
  "instanceof":
    prefix: "iof"
    body: "${1:source} instanceof ${2:Object}"
  "Array.isArray()":
    prefix: "Ais"
    body: "Array.isArray(${1})"
# Tests
  "async it":
    prefix: "ita"
    body: """
    it('${1}', async () => {
      ${0}
    });
    """
  "synchronous it":
    prefix: "it"
    body: """
    it('${1}', () => {
      ${0}
    });
    """
  "describe":
    prefix: "de"
    body: """
    describe('${1}', () => {
      ${0}
    });
    """
  "describe method/function":
    prefix: "def"
    body: """
    describe('${1}()', () => {
      ${0}
    });
    """
  "before each":
    prefix: "be"
    body: """
    beforeEach(() => {
      ${0}
    });
    """
  "after each":
    prefix: "be"
    body: """
    afterEach(() => {
      ${0}
    });
    """
  "expect":
    prefix: "x"
    body: "expect(${1})${2};"
  "expect toBe":
    prefix: "xb"
    body: "expect(${1}).toBe(${2});"
  "expect toEqual":
    prefix: "xe"
    body: "expect(${1}).toEqual(${2});"
  "expect toThrowError":
    prefix: "xte"
    body: """
    expect(() => {
      ${1}
    }).toThrowError('${2:error}');"
    """
# Flowtype
  "import type module":
    prefix: "imt"
    body: "import type ${2:name} from '${1}';"
  "import typeof module":
    prefix: "imto"
    body: "import typeof ${2:name} from '${1}';"
  "import type module named":
    prefix: "imtn"
    body: "import type { $2 } from '${1}';"
  "export type":
    prefix: "ext"
    body: "export type ${1} = ${2};"
