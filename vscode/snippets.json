{
  "callback": {
    "prefix": "cb",
    "body": "() => {${0}}"
  },
  "node callback": {
    "prefix": "cbe",
    "body": "(error${1:, value}) => {${0}}"
  },
  "promise constructor": {
    "prefix": "newP",
    "body": [
      "new Promise((resolve, reject) => {",
      "  ${0}",
      "});"
    ]
  },
  "promise then": {
    "prefix": "then",
    "body": [
      ".then((value) => {",
      "  ${0}",
      "",
      "  return value;",
      "});"
    ]
  },
  "promise inline then": {
    "prefix": "theni",
    "body": [
      ".then(value => (",
      "  ${0}",
      "));"
    ]
  },
  "promise catch": {
    "prefix": "cat",
    "body": [
      ".catch((error) => {",
      "  ${0}",
      "",
      "  throw error;",
      "});"
    ]
  },
  "promise catch swallow": {
    "prefix": "cats",
    "body": ".catch(() => {});"
  },
  "yield": {
    "prefix": "ye",
    "body": "yield ${0};"
  },
  "await": {
    "prefix": "aw",
    "body": "await ${0};"
  },
  "class": {
    "prefix": "cls",
    "body": [
      "class ${1:ClassName} {",
      "  constructor(${2}) {",
      "    ${3}",
      "  }",
      "}"
    ]
  },
  "class extends": {
    "prefix": "clsx",
    "body": [
      "class ${1:ClassName} extends ${2:BaseClass} {",
      "  constructor(${3}) {",
      "    super(${3});",
      "    ${4}",
      "  }",
      "}"
    ]
  },
  "class method": {
    "prefix": "clsm",
    "body": [
      "${1:name}(${2}) {",
      "  ${3}",
      "}"
    ]
  },
  "class bound method": {
    "prefix": "clsmb",
    "body": [
      "${1:name} = (${2}) => {",
      "  ${3}",
      "};"
    ]
  },
  "class property": {
    "prefix": "clsp",
    "body": "${1:name} = ${2};"
  },
  "console log": {
    "prefix": "cl",
    "body": "console.log(${0});"
  },
  "console error": {
    "prefix": "ce",
    "body": "console.error(${0});"
  },
  "console warn": {
    "prefix": "cw",
    "body": "console.warn(${0});"
  },
  "console dir": {
    "prefix": "cd",
    "body": "console.dir(${0});"
  },
  "console table": {
    "prefix": "ct",
    "body": "console.table(${0});"
  },
  "if statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "  ${2}",
      "}"
    ]
  },
  "else statement": {
    "prefix": "el",
    "body": [
      "else {",
      "  ${1}",
      "}"
    ]
  },
  "if/else statement": {
    "prefix": "ife",
    "body": [
      "if (${1:condition}) {",
      "  ${2}",
      "} else {",
      "  ${3}",
      "}"
    ]
  },
  "else if statement": {
    "prefix": "ei",
    "body": [
      "else if (${1:condition}) {",
      "  ${2}",
      "}"
    ]
  },
  "try catch": {
    "prefix": "tc",
    "body": [
      "try {",
      "  ${1}",
      "} catch (${2:err}) {",
      "  ${3}",
      "}"
    ]
  },
  "try finally": {
    "prefix": "tf",
    "body": [
      "try {",
      "  ${1}",
      "} finally {",
      "  ${2}",
      "}"
    ]
  },
  "try catch finally": {
    "prefix": "tcf",
    "body": [
      "try {",
      "  ${1}",
      "} catch (${2:err}) {",
      "  ${3}",
      "} finally {",
      "  ${4}",
      "}"
    ]
  },
  "throw error": {
    "prefix": "te",
    "body": "throw new ${1:TypeError}('${2:message}');"
  },
  "let statement": {
    "prefix": "l",
    "body": "let ${1:name};"
  },
  "let assignment": {
    "prefix": "l=",
    "body": "let ${1:name} = ${2:value};"
  },
  "let yielded": {
    "prefix": "ly",
    "body": "let ${1:name} = yield ${2:value};"
  },
  "let awaited": {
    "prefix": "la",
    "body": "let ${1:name} = await ${2:value};"
  },
  "const statement": {
    "prefix": "c",
    "body": "const ${1:name};"
  },
  "const assignment": {
    "prefix": "c=",
    "body": "const ${1:name} = ${2:value};"
  },
  "const yielded": {
    "prefix": "cy",
    "body": "const ${1:name} = yield ${2:value};"
  },
  "const awaited": {
    "prefix": "ca",
    "body": "const ${1:name} = await ${2:value};"
  },
  "const object": {
    "prefix": "co",
    "body": [
      "const ${1:name} = {",
      "  ${2}",
      "};"
    ]
  },
  "const array": {
    "prefix": "ca",
    "body": [
      "const ${1:name} = [",
      "  ${2}",
      "];"
    ]
  },
  "named function": {
    "prefix": "fn",
    "body": "function ${1:name}(${2}) {${0}}"
  },
  "async named function": {
    "prefix": "afn",
    "body": "async function ${1:name}(${2}) {${0}}"
  },
  "arrow function": {
    "prefix": "af",
    "body": "(${1}) => {${0}};"
  },
  "async arrow function": {
    "prefix": "aaf",
    "body": "async (${1}) => {${0}};"
  },
  "generator": {
    "prefix": "gf",
    "body": "function * (${1}) {${0}}"
  },
  "named generator": {
    "prefix": "gfn",
    "body": "function * ${1:name} (${2}) {${0}}"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": [
      ";(function (${1}) {",
      "  ${0}",
      "})(${2});"
    ]
  },
  "function apply": {
    "prefix": "fna",
    "body": "${1:fn}.apply(${2:this}, ${3});"
  },
  "function call": {
    "prefix": "fnc",
    "body": "${1:fn}.call(${2:this}, ${3});"
  },
  "function bind": {
    "prefix": "fnb",
    "body": "${1:fn}.bind(${2:this}, ${3});"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:iterable}${3:.length}; ${1:i}++) {",
      "  ${4}",
      "}"
    ]
  },
  "for in loop": {
    "prefix": "fin",
    "body": [
      "for (let ${1:key} in ${2:source}) {",
      "  if (${2:source}.hasOwnProperty(${1:key})) {",
      "    ${3}",
      "  }",
      "}"
    ]
  },
  "for of loop": {
    "prefix": "fof",
    "body": [
      "for (let ${1:key} of ${2:source}) {",
      "  ${3}",
      "}"
    ]
  },
  "for await of loop": {
    "prefix": "faof",
    "body": [
      "for await (let ${1:key} of ${2:source}) {",
      "  ${3}",
      "}"
    ]
  },
  "while loop": {
    "prefix": "whl",
    "body": [
      "while (${1:condition}) {",
      "  ${2}",
      "}"
    ]
  },
  "require module": {
    "prefix": "rq",
    "body": "const ${2:name} = require('${1:pkg}');"
  },
  "module exports": {
    "prefix": "me",
    "body": "module.exports = ${1:value};"
  },
  "export module": {
    "prefix": "ex",
    "body": "export ${1:member}"
  },
  "export default module": {
    "prefix": "exd",
    "body": "export default ${1:member}"
  },
  "import module": {
    "prefix": "im",
    "body": "import ${2:name} from '${1}';"
  },
  "import module as *": {
    "prefix": "ims",
    "body": "import ${2:*} as ${3:name} from '${1}';"
  },
  "import module named": {
    "prefix": "imn",
    "body": "import { $2 } from '${1}';"
  },
  "return": {
    "prefix": "r",
    "body": "return ${0};"
  },
  "return this": {
    "prefix": "rth",
    "body": "return this;"
  },
  "return null": {
    "prefix": "rn",
    "body": "return null;"
  },
  "return true": {
    "prefix": "rt",
    "body": "return true;"
  },
  "return false": {
    "prefix": "rf",
    "body": "return false;"
  },
  "return undefined": {
    "prefix": "rr",
    "body": "return;"
  },
  "setTimeout": {
    "prefix": "st",
    "body": [
      "setTimeout(() => {",
      "  ${0}",
      "}, ${1:0});"
    ]
  },
  "nextTick": {
    "prefix": "nt",
    "body": [
      "process.nextTick(() => {",
      "  ${0}",
      "}${1:, args});"
    ]
  },
  "setInterval": {
    "prefix": "si",
    "body": [
      "setInterval(() => {",
      "  ${0}",
      "}, ${1:0});"
    ]
  },
  "setImmediate": {
    "prefix": "sim",
    "body": [
      "setImmediate(() => {",
      "  ${0}",
      "});"
    ]
  },
  "String": {
    "prefix": "S",
    "body": "String"
  },
  "Symbol": {
    "prefix": "Sy",
    "body": "Symbol('${1:name}');"
  },
  "Boolean": {
    "prefix": "B",
    "body": "Boolean"
  },
  "Number": {
    "prefix": "N",
    "body": "Number"
  },
  "Object": {
    "prefix": "O",
    "body": "Object"
  },
  "Array": {
    "prefix": "A",
    "body": "Array"
  },
  "Date": {
    "prefix": "D",
    "body": "Date"
  },
  "RegExp": {
    "prefix": "Rx",
    "body": "RegExp"
  },
  "Promise": {
    "prefix": "P",
    "body": "Promise"
  },
  "typeof": {
    "prefix": "tyof",
    "body": "typeof ${1:source} === '${2:value}'"
  },
  "typeof negated": {
    "prefix": "tyofn",
    "body": "typeof ${1:source} !== '${2:value}'"
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${2:Object}"
  },
  "Array.isArray()": {
    "prefix": "Ais",
    "body": "Array.isArray(${1})"
  },
  "Array.from()": {
    "prefix": "Af",
    "body": "Array.from(${1})"
  },
  "Object.keys()": {
    "prefix": "Ok",
    "body": "Object.keys(${1:data})"
  },
  "Object.keys() loop": {
    "prefix": "Okl",
    "body": [
      "Object.keys(${1:data}).forEach((key) => {",
      "  ${0}",
      "});"
    ]
  },
  "Object.values()": {
    "prefix": "Ov",
    "body": "Object.values(${1:data})"
  },
  "Object.values() loop": {
    "prefix": "Ovl",
    "body": [
      "Object.values(${1:data}).forEach((value) => {",
      "  ${0}",
      "});"
    ]
  },
  "Object.entries()": {
    "prefix": "Oe",
    "body": "Object.entries(${1:data})"
  },
  "Object.entries() loop": {
    "prefix": "Oel",
    "body": [
      "Object.entries(${1:data}).forEach(([key, value]) => {",
      "  ${0}",
      "});"
    ]
  },
  "synchronous it": {
    "prefix": "it",
    "body": [
      "it('${1}', () => {",
      "  ${0}",
      "});"
    ]
  },
  "async it": {
    "prefix": "ita",
    "body": [
      "it('${1}', async () => {",
      "  ${0}",
      "});"
    ]
  },
  "describe": {
    "prefix": "de",
    "body": [
      "describe('${1}', () => {",
      "  ${0}",
      "});"
    ]
  },
  "describe component": {
    "prefix": "dec",
    "body": [
      "describe('<${1} />', () => {",
      "  ${0}",
      "});"
    ]
  },
  "describe method/function": {
    "prefix": "def",
    "body": [
      "describe('${1}()', () => {",
      "  ${0}",
      "});"
    ]
  },
  "before each": {
    "prefix": "be",
    "body": [
      "beforeEach(() => {",
      "  ${0}",
      "});"
    ]
  },
  "after each": {
    "prefix": "ae",
    "body": [
      "afterEach(() => {",
      "  ${0}",
      "});"
    ]
  },
  "expect": {
    "prefix": "x",
    "body": "expect(${1})${2};"
  },
  "expect toBe": {
    "prefix": "xb",
    "body": "expect(${1}).toBe(${2});"
  },
  "expect toEqual": {
    "prefix": "xe",
    "body": "expect(${1}).toEqual(${2});"
  },
  "expect toThrowError": {
    "prefix": "xte",
    "body": [
      "expect(() => {",
      "  ${1}",
      "}).toThrow('${2:error}');"
    ]
  },
  "expect toThrowErrorMatchingShapshot": {
    "prefix": "xtems",
    "body": [
      "expect(() => {",
      "  ${1}",
      "}).toThrowErrorMatchingSnapshot();"
    ]
  },
  "expect toMatchSnapshot": {
    "prefix": "xms",
    "body": "expect(${1:wrapper}).toMatchSnapshot();"
  },
  "expect toHaveBeenCalled": {
    "prefix": "xc",
    "body": "expect(${1:spy}).toHaveBeenCalled();"
  },
  "expect toHaveBeenCalledWith": {
    "prefix": "xcw",
    "body": "expect(${0:spy}).toHaveBeenCalledWith(${1});"
  },
  "expect toHaveLength": {
    "prefix": "xhl",
    "body": "expect(${0:wrapper}).toHaveLength(${1:0});"
  },
  "import types module": {
    "prefix": "imt",
    "body": "import { $1 } from './types';"
  },
  "import constants module": {
    "prefix": "imc",
    "body": "import { $1 } from './constants';"
  },
  "export type": {
    "prefix": "ext",
    "body": "export type ${1} = ${2};"
  },
  "export interface": {
    "prefix": "exi",
    "body": [
      "export interface ${1} {",
      "  ${2}",
      "}"
    ]
  },
  "import React": {
    "prefix": "react",
    "body": [
      "import React from 'react';"
    ]
  },
  "import React + Enzyme": {
    "prefix": "enzyme",
    "body": [
      "import React from 'react';",
      "import { shallow } from 'enzyme';"
    ]
  },
  "import React + Rut": {
    "prefix": "rut",
    "body": [
      "import React from 'react';",
      "import { render } from 'rut-dom';"
    ]
  },
  "React class component": {
    "prefix": "comp",
    "body": [
      "export interface ${1:ComponentName}Props {}",
      "",
      "export class ${1:ComponentName} extends React.Component<${1:ComponentName}Props> {",
      "  render() {",
      "    return ${2:null};",
      "  }",
      "}"
    ]
  },
  "React pure class component": {
    "prefix": "pcomp",
    "body": [
      "export interface ${1:ComponentName}Props {}",
      "",
      "export class ${1:ComponentName} extends React.PureComponent<${1:ComponentName}Props> {",
      "  render() {",
      "    return ${2:null};",
      "  }",
      "}"
    ]
  },
  "React function component": {
    "prefix": "fc",
    "body": [
      "export interface ${1:ComponentName}Props {}",
      "",
      "export function ${1:ComponentName}(props: ${1:ComponentName}Props) {",
      "  return ${2:null};",
      "}"
    ]
  },
  "eslint-disable": {
    "prefix": "esld",
    "body": "/* eslint-disable ${1} */"
  },
  "eslint-disable-line": {
    "prefix": "esldl",
    "body": "// eslint-disable-line ${1}"
  },
  "eslint-disable-next-line": {
    "prefix": "esldnl",
    "body": "// eslint-disable-next-line ${1}"
  },
  "ts-ignore": {
    "prefix": "tsi",
    "body": "// @ts-ignore ${1}"
  },
  "ts-expect-error": {
    "prefix": "tsee",
    "body": "// @ts-expect-error ${1}"
  },
  "istanbul ignore next": {
    "prefix": "iin",
    "body": "// istanbul ignore next"
  }
}
